import telebot
from db import DataBase
from telebot import types
from lessons import Marks
from schools_names import search
from datetime import datetime
import asyncio

#–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ token
with open('token') as token:
    bot = telebot.TeleBot(token.read())

#–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = DataBase('users')
mk = Marks()

#–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=["start"])
def repeat_all_messages(mess):
    #–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ [–ü–æ–º–æ—â—å] [–î–Ω–µ–≤–Ω–∏–∫]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü–æ–º–æ—â—å"), types.KeyboardButton("–î–Ω–µ–≤–Ω–∏–∫"))
    #–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω
    length = db.not_empty(mess.chat.id)
    if length:
        if len(length) < 4:
            bot.send_message(mess.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=markup)
        if len(length) == 4:
            bot.send_message(mess.chat.id, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=markup)
    else:
        bot.send_message(mess.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', reply_markup=markup)
        db.enter(mess.chat.id, {'':''})
        bot.send_message(mess.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')

#–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
@bot.message_handler(commands=["help"])
def repeat_all_messages(mess):
    bot.send_message(mess.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

#–ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@bot.message_handler(content_types=["text"])
def repeat_all_messages(mess):
    #Url –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–æ—Å—Ç—Ä–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    url = 'https://netschool.eduportal44.ru/'
    if mess.text == '–ü–æ–º–æ—â—å':
        bot.send_message(mess.chat.id, '–ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å')
    elif mess.text == '–î–Ω–µ–≤–Ω–∏–∫':
        #–°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
        time = '(' + str(datetime.now().year) + ', ' + str(datetime.now().month) + ', ' + str(datetime.now().day) + ')'
        year = mk.get_year(mess.chat.id)[0]
        for day in year.split('$'):
            if len(day) > 10:
                timecorrect = day[day.index('('):day.index(')')+1]
                day = day[day.index(')')+1:]
                if timecorrect == time:
                    diary = []
                    for line in day.split('#'):
                        diary.append(line.replace('6 ', ''))
                    diary = '\n'.join(diary)
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'{time}<'), types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'{time}<'))
                    bot.send_message(mess.chat.id, f"üìó –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ {time[1:-1]}\n{diary}", reply_markup=keyboard)
                else:
                    diary = []
                    for line in day.split('#'):
                        diary.append(line.replace('6 ', ''))
                    diary = '\n'.join(diary)
                    send_time = timecorrect
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'{send_time}<'), types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f'{send_time}>'))
            bot.send_message(mess.chat.id, f"üìó –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞ {send_time[1:-1]}\n{diary}", reply_markup=keyboard)
    else:
        #–ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–∑–Ω–∞—ë–º, –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç —ç—Ç–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ–º —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        length = db.not_empty(mess.chat.id)
        if length:
            length = len(length)
            if length == 1:
                db.enter(mess.chat.id, {'–õ–æ–≥–∏–Ω':mess.text})
                bot.send_message(mess.chat.id, '–ü–∞—Ä–æ–ª—å')
            elif length == 2:
                db.enter(mess.chat.id, {'–ü–∞—Ä–æ–ª—å':mess.text})
                bot.send_message(mess.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã')
            elif length == 3:
                send = bot.send_message(mess.chat.id, '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
                try:
                    name_school = search(mess.text, url)
                    db.enter(mess.chat.id, {'–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã':name_school})
                    user_id, login, password, name_school = db.not_empty(mess.chat.id)
                    mk.get_data(user_id, login, password, name_school, url)
                    bot.edit_message_text('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ', mess.chat.id, send.id)
                except:
                    db.remove(mess.chat.id)
                    bot.edit_message_text('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start', mess.chat.id, send.id)
            else:
                bot.send_message(mess.chat.id, '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        else:
            bot.send_message(mess.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è - /start')

@bot.callback_query_handler(func=lambda c: '<' in c.data)
def process_callback_button1(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    time = callback_query.data[:-1]
    year = mk.get_year(callback_query.message.chat.id)[0]
    n = ''
    for day in year.split('$'):
        if len(day) > 10:
            timecorrect = day[day.index('('):day.index(')')+1]
            day = day[day.index(')')+1:]
            if timecorrect == time:
                diary = []
                for line in day.split('#'):
                    diary.append(line.replace('6 ', ''))
                diary = '\n'.join(diary)
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'{n}<'), types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f'{n}>'))
                bot.edit_message_text(f"üìó –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {n[1:-1]}\n{diary}", reply_markup=keyboard, chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
                break
            n = timecorrect

@bot.callback_query_handler(func=lambda c: '>' in c.data)
def process_callback_button1(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    time = callback_query.data[:-1]
    year = mk.get_year(callback_query.message.chat.id)[0]
    n = ''
    for day in year.split('$'):
        if len(day) > 10:
            timecorrect = day[day.index('('):day.index(')')+1]
            day = day[day.index(')')+1:]
            if n == time:
                diary = []
                for line in day.split('#'):
                    diary.append(line.replace('6 ', ''))
                diary = '\n'.join(diary)
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f'{timecorrect}<'), types.InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥", callback_data=f'{timecorrect}>'))
                bot.edit_message_text(f"üìó –î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {timecorrect[1:-1]}\n{diary}", reply_markup=keyboard, chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
                break
            n = timecorrect

#–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
bot.infinity_polling()